{
  "stats": {
    "suites": 6,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-01T09:59:14.686Z",
    "end": "2024-09-01T09:59:17.125Z",
    "duration": 2439,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a63e78a4-b7e8-40e9-b593-46dc02b4088e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "44ab9862-2f19-4d74-be7d-583f257dda30",
          "title": "Adding a new Pet",
          "fullFile": "C:\\Users\\Svitlana_Krotova\\Documents\\API\\specs\\add,pet.spec.js",
          "file": "\\specs\\add,pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should allow adding a new Pet",
              "fullTitle": "Adding a new Pet should allow adding a new Pet",
              "timedOut": false,
              "duration": 710,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Define the new pet's data\n    const newPetData = {\n id: 160,\n category: {\n   id: 0,\n   name: \"rats\"\n },\n name: \"Yohanes\",\n photoUrls: [\n   \"https://i.pinimg.com/originals/2d/5d/18/2d5d189c16cfcc3bcc7004b67c5f7d73.jpg\"\n ],\n tags: [\n   {\n     id: 0,\n     name: \"ttt\"\n   }\n ],\n status: \"available\"\n    };\n\n    //  add the new pet\n    const response = await axios.post('https://petstore.swagger.io/v2/pet', newPetData);\n    // Check that the response status is 200\n    expect(response.status).to.equal(200);\n    // Verify that the response data matches the data we sent\n    expect(response.data).to.have.property('name', newPetData.name);\n    expect(response.data).to.have.property('status', newPetData.status);\n    expect(response.data.category).to.have.property('name', newPetData.category.name);\n    expect(response.data.tags[0]).to.have.property('name', newPetData.tags[0].name);\n\n    expect(response.data.id).to.not.equal(0); \n    console.log('Pet created with photo:', response.data);",
              "err": {},
              "uuid": "059e8921-b70a-44fd-993d-3b918056ac05",
              "parentUUID": "44ab9862-2f19-4d74-be7d-583f257dda30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "059e8921-b70a-44fd-993d-3b918056ac05"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 710,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c414c54a-ea16-4d3b-9fe4-f063a5e3c2af",
          "title": " User List Creation",
          "fullFile": "C:\\Users\\Svitlana_Krotova\\Documents\\API\\specs\\create.list.spec.js",
          "file": "\\specs\\create.list.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "allows creating a List of users",
              "fullTitle": " User List Creation allows creating a List of users",
              "timedOut": false,
              "duration": 280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userData = [\n{\n  id: 0,\n  username: \"Svet\",\n  firstName: \"Testk\",\n  lastName: \"Userk\",\n  email: \"testuser2@example.com\",\n  password: \"qwerty\",\n  phone: \"2565656\",\n  userStatus: 0\n}\n];\n// Create the list of users\nconst response = await axios.post('https://petstore.swagger.io/v2/user/createWithList', userData);\n// Verify that the response status is 200\nexpect(response.status).to.equal(200);\n// Make GET request to retrieve the created user by username\nconst getResponse = await axios.get(`https://petstore.swagger.io/v2/user/${userData[0].username}`);\n// Verify that the response status is 200\nexpect(getResponse.status).to.eq(200);",
              "err": {},
              "uuid": "e93c6cda-47e4-4449-a26b-c74d35ee730b",
              "parentUUID": "c414c54a-ea16-4d3b-9fe4-f063a5e3c2af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e93c6cda-47e4-4449-a26b-c74d35ee730b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 280,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "456c36e4-a388-470a-9dc0-284b4623e74e",
          "title": " User Creation",
          "fullFile": "C:\\Users\\Svitlana_Krotova\\Documents\\API\\specs\\create.user.spec.js",
          "file": "\\specs\\create.user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "allows creating a User",
              "fullTitle": " User Creation allows creating a User",
              "timedOut": false,
              "duration": 289,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Define the data for the user to be created\nconst userData = {\n  id: 0,\n  username: \"Claire\",\n  firstName: \"Test\",\n  lastName: \"User\",\n  email: \"testuser@example.com\",\n  password: \"password123\",\n  phone: \"123-456-7890\",\n  userStatus: 0\n};\n// Create the user\nconst response = await axios.post('https://petstore.swagger.io/v2/user', userData);\n// Check that the response status is 200\nexpect(response.status).to.equal(200);\n// Make a GET request to retrieve the created user by username\nconst getResponse = await axios.get(`https://petstore.swagger.io/v2/user/${userData.username}`);\n// Check that the response status is 200\nexpect(getResponse.status).to.eq(200);",
              "err": {},
              "uuid": "13918a95-310c-420b-bc6a-8c0829ab5815",
              "parentUUID": "456c36e4-a388-470a-9dc0-284b4623e74e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13918a95-310c-420b-bc6a-8c0829ab5815"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 289,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d70abb25-d938-4070-833d-973127daa8db",
          "title": "Deleting a Pet",
          "fullFile": "C:\\Users\\Svitlana_Krotova\\Documents\\API\\specs\\delete.spec.js",
          "file": "\\specs\\delete.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should allow delete a Pet",
              "fullTitle": "Deleting a Pet should allow delete a Pet",
              "timedOut": false,
              "duration": 574,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPetData = {\n  id: 162,\n  category: {\n    id: 0,\n    name: \"dogs\"\n  },\n  name: \"Parker\",\n  photoUrls: [\n    \"url\"\n  ],\n  tags: [\n    {\n      id: 0,\n      name: \"ttt\"\n    }\n  ],\n  status: \"available\"\n};\n  // create a new pet\n  const createResponse = await axios.post('https://petstore.swagger.io/v2/pet', newPetData);\n  expect(createResponse.status).to.equal(200);\n  // verify the pet is created\n  const getResponseBeforeDelete = await axios.get(`https://petstore.swagger.io/v2/pet/${newPetData.id}`);\n  expect(getResponseBeforeDelete.status).to.equal(200);\n\n  // delete the created pet\n  const delResponse = await axios.delete(`https://petstore.swagger.io/v2/pet/${newPetData.id}`);\n  expect(delResponse.status).to.equal(200);\n  \n// verify pet is deleted\ntry {\n  await axios.get(`https://petstore.swagger.io/v2/pet/${newPetData.id}`);\n  throw new Error('Pet was not deleted successfully');\n} catch (error) {\n  expect(error.response.status).to.equal(404);\n  }",
              "err": {},
              "uuid": "9618386e-86fe-413a-b2f7-8bc3ccbf6516",
              "parentUUID": "d70abb25-d938-4070-833d-973127daa8db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9618386e-86fe-413a-b2f7-8bc3ccbf6516"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 574,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dd238855-5fc1-4ffa-ae64-c689324415b6",
          "title": "Login and Logout Verification",
          "fullFile": "C:\\Users\\Svitlana_Krotova\\Documents\\API\\specs\\login.logout.spec.js",
          "file": "\\specs\\login.logout.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully log in ",
              "fullTitle": "Login and Logout Verification should successfully log in ",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const username = 'Claire';\nconst password = 'password123';\n// login with data\nconst response = await axios.get(`https://petstore.swagger.io/v2/user/login?username=${username}&password=${password}`);\n// verify the response is 200\nexpect(response.status).to.equal(200);\n// verify the correct message is present in response\nexpect(response.data.message).to.include('logged in user session');",
              "err": {},
              "uuid": "499a80e2-70b4-4141-8d49-01cbf00d33c3",
              "parentUUID": "dd238855-5fc1-4ffa-ae64-c689324415b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully log out ",
              "fullTitle": "Login and Logout Verification should successfully log out ",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// log out\n  const logoutResponse = await axios.get(`https://petstore.swagger.io/v2/user/logout`);\n  // verify the response is 200\n  expect(logoutResponse.status).to.equal(200);\n  // verify the message\n  expect(logoutResponse.data.message).to.include('ok');",
              "err": {},
              "uuid": "dd852efc-0d4f-474d-aa5e-bb8ef95d9e8c",
              "parentUUID": "dd238855-5fc1-4ffa-ae64-c689324415b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "499a80e2-70b4-4141-8d49-01cbf00d33c3",
            "dd852efc-0d4f-474d-aa5e-bb8ef95d9e8c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 280,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ae0da122-3b03-432e-b446-28cb47466190",
          "title": "Pet Data Update",
          "fullFile": "C:\\Users\\Svitlana_Krotova\\Documents\\API\\specs\\update.pet.spec.js",
          "file": "\\specs\\update.pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "allows updating Pet’s image, name and status",
              "fullTitle": "Pet Data Update allows updating Pet’s image, name and status",
              "timedOut": false,
              "duration": 284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petData = {\n    id: 160,\n    category: {\n      id: 0,\n      name: \"rats\"\n    },\n    name: \"Martin\", // new name\n    photoUrls: [\n      \"https://i.pinimg.com/originals/dd/5b/8e/dd5b8e711899ca9acd7032baad1ce280.jpg\" // new url\n    ],\n    tags: [\n      {\n        id: 0,\n        name: \"ttt\"\n      }\n    ],\n    status: \"sold\" //new status\n  };\n  // update pet's data\n  const updateResponse = await axios.put('https://petstore.swagger.io/v2/pet', petData);\n  // verify the response is 200\n  expect(updateResponse.status).to.equal(200);\n  // Make a GET request to retrieve the updated pet data\n  const getResponse = await axios.get(`https://petstore.swagger.io/v2/pet/${petData.id}`);\n  expect(getResponse.status).to.equal(200);\n  // Verify that the retrieved pet data matches the updated data\n  expect(getResponse.data.photoUrls).to.include(petData.photoUrls[0]);\n  expect(getResponse.data).to.have.property('name', petData.name);\n  expect(getResponse.data).to.have.property('status', petData.status);\n  console.log('Updated data:', getResponse.data);",
              "err": {},
              "uuid": "47feb40f-dd6d-43f2-8dd0-77489b6e6728",
              "parentUUID": "ae0da122-3b03-432e-b446-28cb47466190",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47feb40f-dd6d-43f2-8dd0-77489b6e6728"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 284,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}